NAME: myapp
LAST DEPLOYED: Wed May 10 16:03:43 2023
NAMESPACE: default
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
autoscaling:
  enabled: false
  maxReplicas: 100
  minReplicas: 1
  targetCPUUtilizationPercentage: 80
fullnameOverride: ""
image:
  pullPolicy: IfNotPresent
  repository: wordpress
  tag: 4.8-apache
imagePullSecrets: []
ingress:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  className: ""
  enabled: true
  hosts:
  - host: wordpress.local
    paths:
    - path: /?(.*)
      pathType: ImplementationSpecific
  tls: []
mysql:
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  database:
    dbstorage: 20Gi
    mountPath: /var/lib/mysql
    password: 1234@1234
  fullnameOverride: ""
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mysql
    tag: 5.6
  imagePullSecrets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: ""
  replicaCount: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
  service:
    port: 3306
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
nameOverride: ""
replicaCount: 1
resources:
  limits:
    cpu: 1000m
    memory: 512Mi
service:
  port: 80
  type: LoadBalancer
serviceAccount:
  annotations: {}
  create: true
  name: ""
web:
  mountPath: /var/www/html
  webstorage: 20Gi

HOOKS:
---
# Source: wordpress/charts/mysql/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "myapp-mysql-test-connection"
  labels:
    helm.sh/chart: mysql-0.1.0
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['myapp-mysql:3306']
  restartPolicy: Never
---
# Source: wordpress/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "myapp-wordpress-test-connection"
  labels:
    helm.sh/chart: wordpress-0.1.0
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['myapp-wordpress:80']
  restartPolicy: Never
MANIFEST:
---
# Source: wordpress/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: myapp-mysql
  labels:
    helm.sh/chart: mysql-0.1.0
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: wordpress/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: myapp-wordpress
  labels:
    helm.sh/chart: wordpress-0.1.0
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: wordpress/charts/mysql/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: myapp-pass
type: basic-auth
stringData:
  password: 1234@1234
---
# Source: wordpress/charts/mysql/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  resources:
    requests:
      storage: 20Gi
  accessModes:
    - ReadWriteOnce
---
# Source: wordpress/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  resources:
    requests:
      storage: 20Gi
  accessModes:
    - ReadWriteOnce
---
# Source: wordpress/charts/mysql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: myapp-mysql
  labels:
    helm.sh/chart: mysql-0.1.0
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3306
      protocol: TCP
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: myapp
---
# Source: wordpress/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: myapp-wordpress
  labels:
    helm.sh/chart: wordpress-0.1.0
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/instance: myapp
---
# Source: wordpress/charts/mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-mysql
  labels:
    helm.sh/chart: mysql-0.1.0
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: myapp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/instance: myapp
    spec:
      serviceAccountName: myapp-mysql
      securityContext:
        null
      containers:
        - name: mysql
          securityContext:
            null
          image: "mysql:5.6"
          imagePullPolicy: IfNotPresent
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
          env:        
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: myapp-pass
                key: password
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
          - name: mysql-persistent-storage
            persistentVolumeClaim:
             claimName: mysql-pv-claim
---
# Source: wordpress/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-wordpress
  labels:
    helm.sh/chart: wordpress-0.1.0
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: wordpress
      app.kubernetes.io/instance: myapp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: wordpress
        app.kubernetes.io/instance: myapp
    spec:
      serviceAccountName: myapp-wordpress
      securityContext:
        null
      containers:
        - name: wordpress
          securityContext:
            null
          image: "wordpress:4.8-apache"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
          env:
          - name: WORDPRESS_DB_HOST
            value: myapp-mysql
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name : myapp-pass
                key: password
          volumeMounts:
          - name: wordpress-persistent-storage
            mountPath: /var/www/html
      volumes:
        - name: wordpress-persistent-storage
          persistentVolumeClaim:
            claimName: wordpress-pv-claim
---
# Source: wordpress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myapp-wordpress
  labels:
    helm.sh/chart: wordpress-0.1.0
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - host: "wordpress.local"
      http:
        paths:
          - path: /?(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: myapp-wordpress
                port:
                  number: 80

NOTES:
1. Get the application URL by running these commands:
  http://wordpress.local/?(.*)
